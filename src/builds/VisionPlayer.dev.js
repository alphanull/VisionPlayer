/**
 * This build variant extends the VisionPlayer streaming build by integrating additional, experimental components, such as additional visualizers.
 * It is primarily intended for testing and development purposes and may include components that are still under development or experimental.
 * This build is automatically excluded from the published npm package and should only be manually generated by developers working on the VisionPlayer project itself.
 * @exports module:src/builds/VisionPlayer-dev
 * @requires src/builds/VisionPlayer
 * @requires src/visualizer/time/VisualizerTime
 * @requires src/visualizer/frequency/VisualizerFrequency
 * @requires src/util/Debug
 * @author   Frank Kudermann - alphanull
 * @version  1.2.1
 * @license  MIT
 */

import Player from './VisionPlayer.js';
export default Player;

// add dev specific and / or experimental components

import VisualizerFrequency from '../visualizer/frequency/VisualizerFrequency.js';
Player.addComponent('audioChain.visualizerFrequency', VisualizerFrequency);

import VisualizerTime from '../visualizer/time/VisualizerTime.js';
Player.addComponent('audioChain.visualizerTime', VisualizerTime);

// Debugging

Player.setDefaultConfig({
    notifications: {
        showFileOnError: true,
        showMessageOnError: true
    }
});

import Debug from '../util/Debug.js';
Player.addComponent('debug', Debug);

import PerformanceMonitor from '../util/PerformanceMonitor.js';
Player.addComponent('perfmon', PerformanceMonitor);

/* (function() {
    // autoload for dev purposes
    const selector = document.querySelector('script[data-vip-autoload]') && document.querySelector('script[data-vip-autoload]').getAttribute('data-vip-autoselector');
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => Player.autoLoad(selector || undefined));
    } else Player.autoLoad(selector || undefined);
})(); */
